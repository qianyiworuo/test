<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Sql映射  | namespce:唯一标识当前此映射文件 -->
<mapper namespace="com.dao.BookDao">
<!--    当实体类中的属性和数据库中的字段对应時，我们使用resultType和parameterType就可以完成CRUD；-->
<!--    当实体类中的属性和数据库中的字段不对应时，就要用resultMap和parameterMap了。-->
    <!-- 将JAVA实体类中的属性和表中的字段进行对应
         column:数据库中的列
         property:对应的实体类中的属性
-->
    <resultMap type="Book" id="bookResultMap" >
        <id property="bookId" column="id"/>
        <result property="bookName" column="name"/>
        <result property="bookAuthor" column="author"/>
        <result property="bookContent" column="content"/>
        <result property="bookAddDate" column="add_date"/>
    </resultMap>
    <!--property：resultMap的bookName，即实体类中的属性；resultMap：resultMap的id  -->
<!--    <parameterMap id="Book" type="bookParameterMap">-->
<!--        <parameter property="bookName" resultMap="bookResultMap"/>-->
<!--    </parameterMap>-->
    <insert id="addBook" parameterType="Book">
        INSERT INTO book(id,name,author,content,add_date) VALUE (#{bookId},#{bookName}, #{bookAuthor}, #{bookContent}, #{bookAddDate})
    </insert>

    <delete id="deleteBookById" parameterType="String">
        DELETE FROM book WHERE id=#{bookId}
    </delete>

    <update id="updateBook" parameterType="Book">
        UPDATE book
        SET name = #{bookName}, author = #{bookAuthor}, content = #{bookContent}
        WHERE  id = #{bookId}
    </update>

    <select id="queryById" resultMap="bookResultMap" parameterType="String">
        SELECT id,name,author,content,add_date
        FROM book
        WHERE  id = #{bookId}
    </select>
    <select id="queryAllBook" resultMap="bookResultMap">
        SELECT id,name,author,content,add_date
        FROM book
    </select>

</mapper>
